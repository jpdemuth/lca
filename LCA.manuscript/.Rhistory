}
y <- as.bigq(sum(census[,2]))
print(y)
L <- 19
M <- 100
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
y <- as.bigq(sum(census[,2]))
print(y)
L <- 19
M <- 100
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
x <- as.bigq(sum(census[,2]))
y <- sum(as.bigq(census[,2]))
print(x)
print(y)
L <- 19
M <- 100
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
x <- as.bigq(sum(census[,2]))
y <- sum(as.bigq(census[,2]))
print(x)
print(y)
L <- 16
M <- 83
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
x <- as.bigq(sum(census[,2]))
y <- sum(as.bigq(census[,2]))
print(x)
print(y)
L <- 3
M <- 6
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
x <- as.bigq(sum(census[,2]))
y <- sum(as.bigq(census[,2]))
print(x)
print(y)
L <- 20
M <- 96
M <- M-1
foo2 <- census <- list()
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L]]
census <- foo
L <- 20
M <- 96
M <- M-1
foo2 <- census <- list()
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L]
census <- foo
}
y <- sum(unlist(census))
print(y)
L <- 20
M <- 96
M <- M-1
foo2 <- census <- list()
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L])
census <- foo
}
y <- sum(unlist(census))
print(y)
L <- 20
M <- 96
M <- M-1
foo2 <- census <- list()
census[[1]] <- as.bigq(1)
i <- 1
foo <- foo2
j <- 2
foo[[1]] <- 0
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo2 <- census <- list(length=L)
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
foo[[1]] <- 0
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L])
census <- foo
}
W <- vector("list", 602)
foo2 <- census <- vector("list", L)
L <- 20
M <- 96
M <- M-1
foo2 <- census <- vector("list", L)
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
foo[[1]] <- 0
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L])
census <- foo
}
y <- sum(unlist(census))
print(y)
unlist(census)
unlist(census)[2:L]
census
L <- 20
M <- 96
M <- M-1
foo2 <- census <- vector("list", L)
census[[1]] <- as.bigq(1)
census
foo <- foo2
foo[[1]] <- 0
foo[[1]] <- as.bigq(0)
census
foo
j <- 2
census[[j-1]]
foo[[j]] <- census[[j-1]]
foo
unlist(census)
census[[1]]
census[[2]]
unlist(census)
sum(unlist(census))
census[[1]]
census[[1]]->x
census[[1]]->y
x + y
length(census)
for(i in 1:length(census)){
bar[i] <- census[i]
}
bar <- vector()
for(i in 1:length(census)){
bar[i] <- census[i]
}
bar <- vector()
for(i in 1:length(census)){
bar[i] <- census[[i]]
}
sum(census[1:3])
L <- 20
M <- 96
M <- M-1
foo2 <- census <- vector("list", L)
census[[1]] <- as.bigz(1)
for(i in 1:M){
foo <- foo2
foo[[1]] <- as.bigz(0)
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
bar <- vector()
for(i in 1:length(census)){
bar[i] <- census[[i]]
}
census <- foo
}
y <- sum(unlist(census))
print(y)
y <- add.bigz(census)
y <- add.bigz(unlist(census))
unlist(census)
37450/2
.2^5
.2^6
99660/2
sqrt(1/2)
1 - .5^2
(1 - .5^2) * (1-.2^2)
(1 - .5^2) * (.2^2)
(.5^2) * (1-.2^2)
(.5^2) * (.2^2)
(1 - .5^2) * (1-.2^2) * 95
(1 - .5^2) * (.2^2) * 38
(.5^2) * (1-.2^2) * 90
(.5^2) * (.2^2) * 33
(1 - .5^2) * (1-.2^2) * 95 +
(1 - .5^2) * (.2^2) * 38 +
(.5^2) * (1-.2^2) * 90 +
(.5^2) * (.2^2) * 33
95*.4
38*.1
90*.4
33*.1
95*.4 +
38*.1 +
90*.4 +
33*.1
91.47-81.1
95-38
57*.2
2*.25*2.5
2*.64*11.4
91.47-20.74
library("evobiR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("taxize", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("rgbif", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("rgbif")
library("taxize", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("rgdal")
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("taxize", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("evobiR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
system.file("3.fasta")
system.file("3.fasta", package="evobiR")
read.fasta(system.file("3.fasta", package='evobiR'))->fii
readFasta(system.file("3.fasta", package='evobiR'))->fii
CalcPopD
read.alignment(system.file("3.fasta", package='evobiR'))->fii
read.alignment(system.file("3.fasta", package='evobiR'), format='fasta')->fii
install.packages("evobiR")
citation(geiger)
citation("geiger")
library(evobiR)
CoalSim(census = 15, lw = 2, ln.col = 'blue')
CoalSim(census = 15, lw = 2, ln.col = 'blue')
foo <- c(1,2,3,4,5)
mode(foo)
Mode(foo)
?subplex
??subplex
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(x~y)
foo <- lm(x~y)
foo
summary(foo)
foo <- lm(y~x)
summary(foo)
data(mtcars)
mtcars
mtcars$mpg
foo <- lm(mtcars$mpg~mtcars$wt)
summary(foo)
mean(mtcars$wt)
plot(x=mtcars$wt,y=mtcars$mpg)
predict.lm(foo,mean(mtcars$wt))
predict.lm(foo)
install.packages("devtools")
library(devtools)
install_github("SAGA", username='coleoguy')
library(SAGA)
## First try loading data sets
data(PH) #Lynch and Walsh Nicotina plant height
data(SL) #Miller sperm length
data(SR) # Miller sperm receptacle length
data(ban.osa) # Demuth 2004 productivity ecuador x japan
data(dar.bho) # Demuth 2004 productivity tanzania x india
data(per.inf) # Demuth 2004 productivity peru x portugal
data(sin.cro) # Demuth 2004 productivity malaysia x croatia
## Primary analysis function with various argument options and datasets
results <- AnalyzeCrossesMM(PH, model.sum = .25, graph=T) # small conf set of models
results <- AnalyzeCrossesMM(PH, model.sum = .99, graph=T) # large conf set of models
results <- AnalyzeCrossesMM(PH, model.sum = .99, max.models = 10, graph=T) # restrict number of mod to store
results <- AnalyzeCrossesMM(PH, model.sum = .05, graph=T) # single model result
results <- AnalyzeCrossesMM(PH, even.sex=T, graph=F) # equal sex ratio
results <- AnalyzeCrossesMM(ban.osa, even.sex=F, graph=T)
results <- AnalyzeCrossesMM(dar.bho, even.sex=F, graph=T)
results <- AnalyzeCrossesMM(per.inf, even.sex=F, graph=T)
results <- AnalyzeCrossesMM(sin.cro, even.sex=F, graph=T)
results <- AnalyzeCrossesMM(SR, model.sum = .25, graph=T)
# Function to return the cmatrix being used
cmat <- DisplayCmatrix("MP")
# Function to display the result of a specific model
EvaluateModel(data=results, model=3)
# Function to display model space
EvaluateModel(data=results, model=7)
EvaluateModel(data=results, model=57)
EvaluateModel(data=results, model=157)
sample(1:length(results[[1]]),1)
length(results[[1]])
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
VisModelSpace(data=results, cex.u=2)
remove.packages(SAGA)
remove.packages("SAGA")
# Heath Blackmon
# Testing script to share with Jeff
install.packages("devtools")
library(devtools)
install_github("SAGA", username='coleoguy')
library(SAGA)
remove.packages("SAGA")
remove.packages("plotrix")
install.packages("devtools")
setwd("~/Desktop/Dropbox/papers/LCA/LCA.manuscript")
install.packages("devtools")
library(devtools)
install_github("SAGA", username='coleoguy')
library(SAGA)
## First try loading data sets
data(PH) #Lynch and Walsh Nicotina plant height
data(SL) #Miller sperm length
data(SR) # Miller sperm receptacle length
data(ban.osa) # Demuth 2004 productivity ecuador x japan
data(dar.bho) # Demuth 2004 productivity tanzania x india
data(per.inf) # Demuth 2004 productivity peru x portugal
data(sin.cro) # Demuth 2004 productivity malaysia x croatia
## Primary analysis function with various argument options and datasets
results <- AnalyzeCrossesMM(PH, model.sum = .25, graph=T) # small conf set of models
results <- AnalyzeCrossesMM(PH, model.sum = .99, graph=T) # large conf set of models
results <- AnalyzeCrossesMM(PH, model.sum = .99, max.models = 10, graph=T) # restrict number of mod to store
results <- AnalyzeCrossesMM(PH, model.sum = .05, graph=T) # single model result
## now larger model spaces
results <- AnalyzeCrossesMM(PH, even.sex=T, graph=F) # equal sex ratio
results <- AnalyzeCrossesMM(ban.osa, even.sex=F, graph=T)
results <- AnalyzeCrossesMM(dar.bho, even.sex=F, graph=T)
results <- AnalyzeCrossesMM(per.inf, even.sex=F, graph=T)
results <- AnalyzeCrossesMM(sin.cro, even.sex=F, graph=T)
results <- AnalyzeCrossesMM(SR, model.sum = .25, graph=T)
# Function to return the cmatrix being used
cmat <- DisplayCmatrix("MP")
# Function to display the result of a specific model
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
results <- AnalyzeCrossesMM(PH, model.sum = .99, max.models = 10, graph=T) # restrict number of mod to store
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
EvaluateModel(data=results, model=sample(1:length(results[[1]]),1))
